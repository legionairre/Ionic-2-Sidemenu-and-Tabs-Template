"use strict";
var config_1 = require('../util/config');
var config_2 = require('../util/config');
describe('util', function () {
    describe('generateBuildOptions', function () {
        it('should set isWatch true with isWatch true context', function () {
            var opts = config_1.generateBuildOptions({
                isWatch: true
            });
            expect(opts.isWatch).toEqual(true);
        });
        it('should set isWatch false by default', function () {
            var opts = config_1.generateBuildOptions();
            expect(opts.isWatch).toEqual(false);
        });
        it('should set isProd false with isProd false context', function () {
            var opts = config_1.generateBuildOptions({
                isProd: false
            });
            expect(opts.isProd).toEqual(false);
        });
        it('should set isProd by default', function () {
            var opts = config_1.generateBuildOptions();
            expect(opts.isProd).toEqual(true);
        });
        it('should create an object when passed nothing', function () {
            var opts = config_1.generateBuildOptions();
            expect(opts).toBeDefined();
        });
    });
    describe('getConfigValueDefaults', function () {
        it('should get arg full value', function () {
            config_2.addArgv('--full');
            config_2.addArgv('fullArgValue');
            config_2.addArgv('-s');
            config_2.addArgv('shortArgValue');
            config_2.setProcessEnvVar('npm_package_config_envVar', 'myNPMConfigVal');
            config_2.setProcessEnvVar('envVar', 'myProcessEnvVar');
            var val = config_1.getConfigValueDefaults('--full', '-s', 'envVar', 'defaultValue', context);
            expect(val).toEqual('fullArgValue');
        });
        it('should get arg short value', function () {
            config_2.addArgv('-s');
            config_2.addArgv('shortArgValue');
            config_2.setProcessEnvVar('npm_package_config_envVar', 'myNPMConfigVal');
            config_2.setProcessEnvVar('envVar', 'myProcessEnvVar');
            var val = config_1.getConfigValueDefaults('--full', '-s', 'envVar', 'defaultValue', context);
            expect(val).toEqual('shortArgValue');
        });
        it('should get npm config value', function () {
            config_2.setProcessEnvVar('npm_package_config_envVar', 'myNPMConfigVal');
            config_2.setProcessEnvVar('envVar', 'myProcessEnvVar');
            var val = config_1.getConfigValueDefaults('--full', '-s', 'envVar', 'defaultValue', context);
            expect(val).toEqual('myNPMConfigVal');
        });
        it('should get envVar value', function () {
            config_2.setProcessEnvVar('envVar', 'myProcessEnvVar');
            var val = config_1.getConfigValueDefaults('--full', '-s', 'envVar', 'defaultValue', context);
            expect(val).toEqual('myProcessEnvVar');
        });
        it('should get default value', function () {
            var val = config_1.getConfigValueDefaults('--full', '-s', 'envVar', 'defaultValue', context);
            expect(val).toEqual('defaultValue');
        });
    });
    describe('fillConfigDefaults', function () {
        it('should not return same config instances', function () {
            config_2.addArgv('-s');
            config_2.addArgv('configFile');
            var configStub = {};
            spyOn(require('module'), '_load').and.returnValue(configStub);
            var config = config_1.fillConfigDefaults({ rootDir: './' }, null, { fullArgConfig: '', shortArgConfig: '-s', defaultConfigFilename: '', envConfig: '' });
            expect(config).not.toBe(configStub);
        });
        it('should load config when null is passed for config object', function () {
            var configFilePath = "dummyConfigFilePath";
            var requiredModules = [];
            var config = null;
            config_2.addArgv('-s');
            config_2.addArgv(configFilePath);
            spyOn(require('module'), '_load').and
                .callFake(function (moduleName) {
                requiredModules.push(moduleName);
                return {};
            });
            config_1.fillConfigDefaults({ rootDir: './' }, config, { fullArgConfig: '', shortArgConfig: '-s', defaultConfigFilename: '', envConfig: '' });
            expect(requiredModules).toContain(configFilePath);
        });
        it('should not load config when empty object is passed for config object', function () {
            var configFilePath = "dummyConfigFilePath";
            var requiredModules = [];
            var config = {};
            config_2.addArgv('-s');
            config_2.addArgv(configFilePath);
            spyOn(require('module'), '_load').and
                .callFake(function (moduleName) {
                requiredModules.push(moduleName);
                return {};
            });
            config_1.fillConfigDefaults({ rootDir: './' }, config, { fullArgConfig: '', shortArgConfig: '-s', defaultConfigFilename: '', envConfig: '' });
            expect(requiredModules).not.toContain(configFilePath);
        });
    });
    var context;
    beforeEach(function () {
        config_2.setProcessArgs(['node', 'ionic-app-scripts']);
        config_2.setProcessEnv({});
        config_2.setCwd('');
        context = config_1.generateContext({});
    });
});
