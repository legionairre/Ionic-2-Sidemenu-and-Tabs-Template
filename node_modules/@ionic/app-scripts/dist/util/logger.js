"use strict";
var path_1 = require('path');
var config_1 = require('./config');
var fs_extra_1 = require('fs-extra');
var Logger = (function () {
    function Logger(scope) {
        if (!printedAppScriptsVersion) {
            printedAppScriptsVersion = true;
            Logger.info("ionic-app-scripts " + getAppScriptsVersion());
        }
        this.start = Date.now();
        this.scope = scope;
        Logger.info(scope + " started ...");
    }
    Logger.prototype.ready = function () {
        return this.completed('ready');
    };
    Logger.prototype.finish = function () {
        return this.completed('finished');
    };
    Logger.prototype.completed = function (msg) {
        var duration = Date.now() - this.start;
        var time;
        if (duration > 1000) {
            time = 'in ' + (duration / 1000).toFixed(2) + ' s';
        }
        else {
            var ms = parseFloat((duration).toFixed(3));
            if (ms > 0) {
                time = 'in ' + duration + ' ms';
            }
            else {
                time = 'in less than 1 ms';
            }
        }
        Logger.info(this.scope + " " + msg + " " + time);
        return true;
    };
    Logger.prototype.fail = function (err, msg, printExceptionStack) {
        if (msg === void 0) { msg = null; }
        if (printExceptionStack === void 0) { printExceptionStack = true; }
        var printMessage = true;
        if (err && err.hasBeenHandled === true) {
            // the exception has been handled, so don't print the message
            printMessage = false;
        }
        if (printMessage) {
            if (msg) {
                Logger.error(this.scope + " failed:  " + msg);
            }
            if (err) {
                if (err.message) {
                    Logger.error(this.scope + " failed:  " + err.message);
                }
                if (typeof err === 'string') {
                    Logger.error(err);
                }
                if (printExceptionStack && err.stack) {
                    Logger.error(err.stack);
                }
            }
        }
        if (err) {
            err.hasBeenHandled = true;
        }
        return false;
    };
    Logger.info = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i - 0] = arguments[_i];
        }
        print('info', msg.join(' '));
    };
    Logger.warn = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i - 0] = arguments[_i];
        }
        print('warn', msg.join(' '));
    };
    Logger.error = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i - 0] = arguments[_i];
        }
        print('error', msg.join(' '));
    };
    Logger.debug = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i - 0] = arguments[_i];
        }
        if (config_1.isDebugMode()) {
            msg.push("- Memory: " + (process.memoryUsage().rss / 1000000).toFixed(2) + "MB");
            print('log', msg.join(' '), ' DEBUG! ');
        }
    };
    return Logger;
}());
exports.Logger = Logger;
function print(type, msg, prefix) {
    var date = new Date();
    if (!prefix) {
        prefix = ('0' + date.getHours()).slice(-2) + ':' + ('0' + date.getMinutes()).slice(-2) + ':' + ('0' + date.getSeconds()).slice(-2);
    }
    console[type]("[" + prefix + "]  " + msg);
}
var printedAppScriptsVersion = false;
function getAppScriptsVersion() {
    var rtn = '';
    try {
        var packageJson = fs_extra_1.readJSONSync(path_1.join(__dirname, '..', '..', 'package.json'));
        rtn = packageJson.version || '';
    }
    catch (e) { }
    return rtn;
}
