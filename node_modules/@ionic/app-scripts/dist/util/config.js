"use strict";
var fs_extra_1 = require('fs-extra');
var path_1 = require('path');
var helpers_1 = require('./helpers');
/**
 * Create a context object which is used by all the build tasks.
 * Filling the config data uses the following hierarchy, which will
 * keep going down the list until it, or if it, finds data.
 *
 * 1) Get from the passed in context variable
 * 2) Get from the config file set using the command-line args
 * 3) Get from npm package.json config
 * 4) Get environment variables
 *
 * Lastly, Ionic's default configs will always fill in any data
 * which is missing from the user's data.
 */
function generateContext(context) {
    if (!context) {
        context = {};
    }
    context.rootDir = context.rootDir || getConfigValueDefaults('--rootDir', null, ENV_VAR_ROOT_DIR, processCwd, context);
    setProcessEnvVar(ENV_VAR_ROOT_DIR, context.rootDir);
    context.tmpDir = context.tmpDir || getConfigValueDefaults('--tmpDir', null, ENV_VAR_TMP_DIR, path_1.join(context.rootDir, TMP_DIR), context);
    setProcessEnvVar(ENV_VAR_TMP_DIR, context.tmpDir);
    context.srcDir = context.srcDir || getConfigValueDefaults('--srcDir', null, ENV_VAR_SRC_DIR, path_1.join(context.rootDir, SRC_DIR), context);
    setProcessEnvVar(ENV_VAR_SRC_DIR, context.srcDir);
    context.wwwDir = context.wwwDir || getConfigValueDefaults('--wwwDir', null, ENV_VAR_WWW_DIR, path_1.join(context.rootDir, WWW_DIR), context);
    setProcessEnvVar(ENV_VAR_WWW_DIR, context.wwwDir);
    context.buildDir = context.buildDir || getConfigValueDefaults('--buildDir', null, ENV_VAR_BUILD_DIR, path_1.join(context.wwwDir, BUILD_DIR), context);
    setProcessEnvVar(ENV_VAR_BUILD_DIR, context.buildDir);
    checkDebugMode();
    return context;
}
exports.generateContext = generateContext;
function generateBuildOptions(options) {
    if (!options) {
        options = {};
    }
    if (typeof options.isProd !== 'boolean') {
        options.isProd = !(hasArg('--dev', '-d') || (getEnvVariable(ENV_VAR_IONIC_DEV) === 'true'));
    }
    setIonicEnvironment(options.isProd);
    if (typeof options.isWatch !== 'boolean') {
        options.isWatch = hasArg('--watch', '-w');
    }
    return options;
}
exports.generateBuildOptions = generateBuildOptions;
function fillConfigDefaults(context, userConfig, task) {
    // if the context property wasn't already set, then see if a config file
    // was supplied by the user as an arg or env variable
    if (!userConfig) {
        userConfig = getConfigFileData(task.fullArgConfig, task.shortArgConfig, task.envConfig, null, context);
    }
    var defaultConfig = require(path_1.join('..', '..', 'config', task.defaultConfigFilename));
    // always assign any default values which were not already supplied by the user
    return helpers_1.objectAssign({}, defaultConfig, userConfig);
}
exports.fillConfigDefaults = fillConfigDefaults;
function getConfigFileData(fullName, shortName, envVarName, defaultValue, context) {
    // see if the user supplied a value for where to look up their config file
    var configFilePath = getConfigValueDefaults(fullName, shortName, envVarName, null, context);
    if (configFilePath) {
        try {
            // create a fresh copy of the config each time
            var config = require(configFilePath);
            return helpers_1.objectAssign({}, config);
        }
        catch (e) {
            console.error("Config file \"" + configFilePath + "\" not found. Using defaults instead.");
            console.error(e);
        }
    }
    return null;
}
function getConfigValueDefaults(argFullName, argShortName, envVarName, defaultValue, context) {
    // first see if the value was set in the command-line args
    var argValue = getArgValue(argFullName, argShortName);
    if (argValue) {
        return path_1.join(context.rootDir, argValue);
    }
    // next see if it was set in the environment variables
    // which also checks if it was set in the npm package.json config
    var envVar = getEnvVariable(envVarName);
    if (envVar) {
        return path_1.join(context.rootDir, envVar);
    }
    // return the default if nothing above was found
    return defaultValue;
}
exports.getConfigValueDefaults = getConfigValueDefaults;
function getEnvVariable(envVarName) {
    // see if it was set in npm package.json config
    // which ends up as an env variable prefixed with "npm_package_config_"
    var val = getProcessEnvVar('npm_package_config_' + envVarName);
    if (val !== undefined) {
        return val;
    }
    // next see if it was just set as an environment variables
    val = getProcessEnvVar(envVarName);
    if (val !== undefined) {
        return val;
    }
    return null;
}
function getArgValue(fullName, shortName) {
    for (var i = 2; i < processArgv.length; i++) {
        var arg = processArgv[i];
        if (arg === fullName || (shortName && arg === shortName)) {
            var val = processArgv[i + 1];
            if (val !== undefined && val !== '') {
                return val;
            }
        }
    }
    return null;
}
function hasArg(fullName, shortName) {
    if (shortName === void 0) { shortName = null; }
    return !!(processArgv.some(function (a) { return a === fullName; }) || (shortName !== null && processArgv.some(function (a) { return a === shortName; })));
}
exports.hasArg = hasArg;
function replacePathVars(context, filePath) {
    return filePath.replace('{{SRC}}', context.srcDir)
        .replace('{{WWW}}', context.wwwDir)
        .replace('{{TMP}}', context.tmpDir)
        .replace('{{ROOT}}', context.rootDir)
        .replace('{{BUILD}}', context.buildDir);
}
exports.replacePathVars = replacePathVars;
function getNodeBinExecutable(context, cmd) {
    var cmdPath = path_1.join(context.rootDir, 'node_modules', '.bin', cmd);
    try {
        fs_extra_1.accessSync(cmdPath);
    }
    catch (e) {
        cmdPath = null;
    }
    return cmdPath;
}
exports.getNodeBinExecutable = getNodeBinExecutable;
var checkedDebug = false;
function checkDebugMode() {
    if (!checkedDebug) {
        if (hasArg('--debug') || getEnvVariable('ionic_debug_mode') === 'true') {
            processEnv.ionic_debug_mode = 'true';
        }
        checkedDebug = true;
    }
}
function isDebugMode() {
    return (processEnv.ionic_debug_mode === 'true');
}
exports.isDebugMode = isDebugMode;
function setIonicEnvironment(isProd) {
    setProcessEnvVar(ENV_VAR_IONIC_ENV, (isProd ? ENV_VAR_PROD : ENV_VAR_DEV));
}
exports.setIonicEnvironment = setIonicEnvironment;
var processArgv;
function setProcessArgs(argv) {
    processArgv = argv;
}
exports.setProcessArgs = setProcessArgs;
setProcessArgs(process.argv);
function addArgv(value) {
    processArgv.push(value);
}
exports.addArgv = addArgv;
var processEnv;
function setProcessEnv(env) {
    processEnv = env;
}
exports.setProcessEnv = setProcessEnv;
setProcessEnv(process.env);
function setProcessEnvVar(key, value) {
    processEnv[key] = value;
}
exports.setProcessEnvVar = setProcessEnvVar;
function getProcessEnvVar(key) {
    var val = processEnv[key];
    if (typeof val === 'boolean') {
        // ensure this always returns a string
        return val.toString();
    }
    return val;
}
exports.getProcessEnvVar = getProcessEnvVar;
var processCwd;
function setCwd(cwd) {
    processCwd = cwd;
}
exports.setCwd = setCwd;
setCwd(process.cwd());
var BUILD_DIR = 'build';
var SRC_DIR = 'src';
var TMP_DIR = '.tmp';
var WWW_DIR = 'www';
var ENV_VAR_PROD = 'prod';
var ENV_VAR_DEV = 'dev';
var ENV_VAR_IONIC_ENV = 'IONIC_ENV';
var ENV_VAR_IONIC_DEV = 'ionic_dev';
var ENV_VAR_ROOT_DIR = 'ionic_root_dir';
var ENV_VAR_TMP_DIR = 'ionic_tmp_dir';
var ENV_VAR_SRC_DIR = 'ionic_src_dir';
var ENV_VAR_WWW_DIR = 'ionic_www_dir';
var ENV_VAR_BUILD_DIR = 'ionic_build_dir';
