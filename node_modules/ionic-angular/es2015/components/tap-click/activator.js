import { nativeTimeout, rafFrames } from '../../util/dom';
export class Activator {
    constructor(app, config) {
        this.app = app;
        this._queue = [];
        this._active = [];
        this._css = config.get('activatedClass') || 'activated';
    }
    downAction(ev, activatableEle, startCoord) {
        let self = this;
        if (self.disableActivated(ev)) {
            return;
        }
        self._queue.push(activatableEle);
        rafFrames(2, function () {
            let activatableEle;
            for (let i = 0; i < self._queue.length; i++) {
                activatableEle = self._queue[i];
                if (activatableEle && activatableEle.parentNode) {
                    self._active.push(activatableEle);
                    activatableEle.classList.add(self._css);
                }
            }
            self._queue = [];
        });
    }
    upAction(ev, activatableEle, startCoord) {
        rafFrames(CLEAR_STATE_DEFERS, () => {
            this.clearState();
        });
    }
    clearState() {
        if (!this.app.isEnabled()) {
            nativeTimeout(() => {
                this.clearState();
            }, 600);
        }
        else {
            this.deactivate();
        }
    }
    deactivate() {
        let self = this;
        self._queue = [];
        rafFrames(2, function () {
            for (var i = 0; i < self._active.length; i++) {
                self._active[i].classList.remove(self._css);
            }
            self._active = [];
        });
    }
    disableActivated(ev) {
        if (ev.defaultPrevented)
            return true;
        let targetEle = ev.target;
        for (let x = 0; x < 4; x++) {
            if (!targetEle)
                break;
            if (targetEle.hasAttribute('disable-activated'))
                return true;
            targetEle = targetEle.parentElement;
        }
        return false;
    }
}
const CLEAR_STATE_DEFERS = 5;
