import { ElementRef, EventEmitter, Renderer } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Config } from '../../config/config';
import { Ion } from '../ion';
import { Debouncer } from '../../util/debouncer';
export declare class Searchbar extends Ion {
    _value: string | number;
    _shouldBlur: boolean;
    _isActive: boolean;
    _searchbarInput: ElementRef;
    _debouncer: Debouncer;
    color: string;
    mode: string;
    cancelButtonText: string;
    showCancelButton: any;
    debounce: number;
    placeholder: string;
    autocomplete: string;
    autocorrect: string;
    spellcheck: string | boolean;
    type: string;
    ionInput: EventEmitter<UIEvent>;
    ionBlur: EventEmitter<UIEvent>;
    ionFocus: EventEmitter<UIEvent>;
    ionCancel: EventEmitter<UIEvent>;
    ionClear: EventEmitter<UIEvent>;
    _sbHasFocus: boolean;
    constructor(config: Config, elementRef: ElementRef, renderer: Renderer, ngControl: NgControl);
    searchbarInput: ElementRef;
    _searchbarIcon: ElementRef;
    _cancelButton: ElementRef;
    value: string | number;
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    positionElements(): void;
    positionInputPlaceholder(inputEle: HTMLElement, iconEle: HTMLElement): void;
    positionCancelButton(cancelButtonEle: HTMLElement): void;
    shouldAlignLeft(): boolean;
    inputChanged(ev: any): void;
    inputFocused(ev: UIEvent): void;
    inputBlurred(ev: UIEvent): void;
    clearInput(ev: UIEvent): void;
    cancelSearchbar(ev: UIEvent): void;
    writeValue(val: any): void;
    onChange: (_: any) => void;
    onTouched: () => void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
}
