import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, NgZone, Output, Renderer, ViewChild, ViewEncapsulation } from '@angular/core';
import { Backdrop } from '../backdrop/backdrop';
import { Config } from '../../config/config';
import { isTrueProperty } from '../../util/util';
import { Keyboard } from '../../util/keyboard';
import { MenuContentGesture } from './menu-gestures';
import { MenuController } from './menu-controller';
import { Platform } from '../../platform/platform';
import { GestureController } from '../../gestures/gesture-controller';
export var Menu = (function () {
    function Menu(_menuCtrl, _elementRef, _config, _platform, _renderer, _keyboard, _zone, gestureCtrl) {
        this._elementRef = _elementRef;
        this._config = _config;
        this._platform = _platform;
        this._renderer = _renderer;
        this._keyboard = _keyboard;
        this._zone = _zone;
        this.gestureCtrl = gestureCtrl;
        this._isEnabled = true;
        this._isSwipeEnabled = true;
        this._isAnimating = false;
        this._isPers = false;
        this._init = false;
        this.isOpen = false;
        this.ionDrag = new EventEmitter();
        this.ionOpen = new EventEmitter();
        this.ionClose = new EventEmitter();
        this._menuCtrl = _menuCtrl;
    }
    Object.defineProperty(Menu.prototype, "enabled", {
        get: function () {
            return this._isEnabled;
        },
        set: function (val) {
            this._isEnabled = isTrueProperty(val);
            this._setListeners();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Menu.prototype, "swipeEnabled", {
        get: function () {
            return this._isSwipeEnabled;
        },
        set: function (val) {
            this._isSwipeEnabled = isTrueProperty(val);
            this._setListeners();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Menu.prototype, "persistent", {
        get: function () {
            return this._isPers;
        },
        set: function (val) {
            this._isPers = isTrueProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Menu.prototype.ngOnInit = function () {
        var self = this;
        self._init = true;
        var content = self.content;
        self._cntEle = (content instanceof Node) ? content : content && content.getNativeElement && content.getNativeElement();
        if (!self._cntEle) {
            return console.error('Menu: must have a [content] element to listen for drag events on. Example:\n\n<ion-menu [content]="content"></ion-menu>\n\n<ion-nav #content></ion-nav>');
        }
        if (self.side !== 'left' && self.side !== 'right') {
            self.side = 'left';
        }
        self._renderer.setElementAttribute(self._elementRef.nativeElement, 'side', self.side);
        if (!self.type) {
            self.type = self._config.get('menuType');
        }
        self._renderer.setElementAttribute(self._elementRef.nativeElement, 'type', self.type);
        self._cntGesture = new MenuContentGesture(self, document.body);
        var hasEnabledSameSideMenu = self._menuCtrl.getMenus().some(function (m) {
            return m.side === self.side && m.enabled;
        });
        if (hasEnabledSameSideMenu) {
            self._isEnabled = false;
        }
        self._setListeners();
        self.onContentClick = function (ev) {
            if (self._isEnabled) {
                ev.preventDefault();
                ev.stopPropagation();
                self.close();
            }
        };
        self._cntEle.classList.add('menu-content');
        self._cntEle.classList.add('menu-content-' + self.type);
        self._menuCtrl.register(self);
    };
    Menu.prototype.bdClick = function (ev) {
        // console.debug('backdrop clicked');
        ev.preventDefault();
        ev.stopPropagation();
        this._menuCtrl.close();
    };
    Menu.prototype._setListeners = function () {
        if (!this._init) {
            return;
        }
        if (this._isEnabled && this._isSwipeEnabled && !this._cntGesture.isListening) {
            // console.debug('menu, gesture listen', this.side);
            this._cntGesture.listen();
        }
        else if (this._cntGesture.isListening && (!this._isEnabled || !this._isSwipeEnabled)) {
            // console.debug('menu, gesture unlisten', this.side);
            this._cntGesture.unlisten();
        }
    };
    Menu.prototype._getType = function () {
        if (!this._type) {
            this._type = MenuController.create(this.type, this, this._platform);
            if (this._config.get('animate') === false) {
                this._type.ani.duration(0);
            }
        }
        return this._type;
    };
    Menu.prototype.setOpen = function (shouldOpen, animated) {
        var _this = this;
        if (animated === void 0) { animated = true; }
        if ((shouldOpen && this.isOpen) || !this._isEnabled || this._isAnimating) {
            return Promise.resolve(this.isOpen);
        }
        this._before();
        return new Promise(function (resolve) {
            _this._getType().setOpen(shouldOpen, animated, function () {
                _this._after(shouldOpen);
                resolve(_this.isOpen);
            });
        });
    };
    Menu.prototype.canSwipe = function () {
        return this._isEnabled && this._isSwipeEnabled && !this._isAnimating;
    };
    Menu.prototype.swipeStart = function () {
        if (this.canSwipe()) {
            this._before();
            this._getType().setProgressStart(this.isOpen);
        }
    };
    Menu.prototype.swipeProgress = function (stepValue) {
        if (!this._isAnimating) {
            return;
        }
        this._getType().setProgessStep(stepValue);
        this.ionDrag.emit(stepValue);
    };
    Menu.prototype.swipeEnd = function (shouldCompleteLeft, shouldCompleteRight, stepValue) {
        var _this = this;
        if (!this._isAnimating) {
            return;
        }
        var opening = !this.isOpen;
        var shouldComplete = false;
        if (opening) {
            shouldComplete = (this.side === 'right') ? shouldCompleteLeft : shouldCompleteRight;
        }
        else {
            shouldComplete = (this.side === 'right') ? shouldCompleteRight : shouldCompleteLeft;
        }
        this._getType().setProgressEnd(shouldComplete, stepValue, function (isOpen) {
            // console.debug('menu, swipeEnd', _this.side);
            _this._after(isOpen);
        });
    };
    Menu.prototype._before = function () {
        this.getNativeElement().classList.add('show-menu');
        this.getBackdropElement().classList.add('show-backdrop');
        this._keyboard.close();
        this._isAnimating = true;
    };
    Menu.prototype._after = function (isOpen) {
        this.isOpen = isOpen;
        this._isAnimating = false;
        this._cntEle.classList[isOpen ? 'add' : 'remove']('menu-content-open');
        this._cntEle.removeEventListener('click', this.onContentClick);
        if (isOpen) {
            this._cntEle.addEventListener('click', this.onContentClick);
            this.ionOpen.emit(true);
        }
        else {
            this.getNativeElement().classList.remove('show-menu');
            this.getBackdropElement().classList.remove('show-backdrop');
            this.ionClose.emit(true);
        }
    };
    Menu.prototype.open = function () {
        return this.setOpen(true);
    };
    Menu.prototype.close = function () {
        return this.setOpen(false);
    };
    Menu.prototype.toggle = function () {
        return this.setOpen(!this.isOpen);
    };
    Menu.prototype.enable = function (shouldEnable) {
        var _this = this;
        this.enabled = shouldEnable;
        if (!shouldEnable && this.isOpen) {
            this.close();
        }
        if (shouldEnable) {
            this._menuCtrl.getMenus()
                .filter(function (m) { return m.side === _this.side && m !== _this; })
                .map(function (m) { return m.enabled = false; });
        }
        return this;
    };
    Menu.prototype.swipeEnable = function (shouldEnable) {
        this.swipeEnabled = shouldEnable;
        return this;
    };
    Menu.prototype.getNativeElement = function () {
        return this._elementRef.nativeElement;
    };
    Menu.prototype.getMenuElement = function () {
        return this.getNativeElement().querySelector('.menu-inner');
    };
    Menu.prototype.getContentElement = function () {
        return this._cntEle;
    };
    Menu.prototype.getBackdropElement = function () {
        return this.backdrop.getNativeElement();
    };
    Menu.prototype.width = function () {
        return this.getMenuElement().offsetWidth;
    };
    Menu.prototype.getMenuController = function () {
        return this._menuCtrl;
    };
    Menu.prototype.ngOnDestroy = function () {
        this._menuCtrl.unregister(this);
        this._cntGesture && this._cntGesture.destroy();
        this._type && this._type.destroy();
        this._resizeUnreg && this._resizeUnreg();
        this._cntGesture = null;
        this._type = null;
        this._cntEle = null;
        this._resizeUnreg = null;
    };
    Menu.decorators = [
        { type: Component, args: [{
                    selector: 'ion-menu',
                    template: '<div class="menu-inner"><ng-content></ng-content></div>' +
                        '<ion-backdrop (click)="bdClick($event)" disableScroll="false"></ion-backdrop>',
                    host: {
                        'role': 'navigation'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                },] },
    ];
    Menu.ctorParameters = [
        { type: MenuController, },
        { type: ElementRef, },
        { type: Config, },
        { type: Platform, },
        { type: Renderer, },
        { type: Keyboard, },
        { type: NgZone, },
        { type: GestureController, },
    ];
    Menu.propDecorators = {
        'backdrop': [{ type: ViewChild, args: [Backdrop,] },],
        'content': [{ type: Input },],
        'id': [{ type: Input },],
        'side': [{ type: Input },],
        'type': [{ type: Input },],
        'enabled': [{ type: Input },],
        'swipeEnabled': [{ type: Input },],
        'persistent': [{ type: Input },],
        'maxEdgeStart': [{ type: Input },],
        'ionDrag': [{ type: Output },],
        'ionOpen': [{ type: Output },],
        'ionClose': [{ type: Output },],
    };
    return Menu;
}());
